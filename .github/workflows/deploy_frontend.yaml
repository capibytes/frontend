name: Deploy backend

on:
  push:
    branches:
      - main

env:
  REGISTRY: 794196173640.dkr.ecr.us-east-1.amazonaws.com
  IMAGE_REPOSITORY: capibytes-backend-repo
  AWS_REGION: us-east-1

permissions:
  id-token: write # Permissão para acessar AWS por OpenID
  contents: read

jobs:
  build-and-push-image:
    runs-on: ubuntu-latest

    steps:
      - name: Capturando código atualizado
        uses: actions/checkout@v4

      - name: Mudar ambiente para prod
        run: echo "spring.profiles.active=prod" > src/main/resources/application.properties

      - name: Configurar credenciais AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.IAM_ROLE }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          mask-password: 'true'

      - name: Extrair metadados a partir do repo
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_REPOSITORY }}
          tags: |
            type=raw,value=latest
          flavor: |
            latest=auto

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build e Push da imagem Docker
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          target: app
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  # deploy:
  #   runs-on: ubuntu-latest
  #   needs: build-and-push-image
  #   steps:

  #     - name: Deploy no servidor usando SSH
  #       uses: appleboy/ssh-action@v0.1.10
  #       with:
  #         host: ${{ secrets.HOST }}
  #         username: ${{ secrets.ACTIONS_USER }}
  #         key: ${{ secrets.ACTIONS_KEY }}
  #         port: ${{ secrets.SSH_PORT }}
  #         script: |
  #           cd ${{ secrets.DEPLOY_DIR }} 
  #           aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ env.REGISTRY }}
  #           docker-compose up -d ${{ env.DOCKER_SERVICES }}
  #           docker image prune -a -f